{"version":3,"sources":["util.js"],"names":["define","isArray","arr","Object","prototype","toString","call","hasClass","element","className","classNames","arrClassName","split","i","length","addEvent","event","listener","addEventListener","attachEvent","removeEvent","removeEventListener","detachEvent","addClickEvent","removeClickEvent","removeClass","oldClassName","splice","join","addClass","newClassName","click","unclick","uniqArray1","len","result","obj","push"],"mappings":"AAAAA,OAAO,WAOP,SAASC,EAAQC,GACb,MAAO,mBAAqBC,OAAOC,UAAUC,SAASC,KAAKJ,GA6W/D,SAASK,EAASC,EAASC,GACvB,IAAIC,EAAaF,EAAQC,UACzB,IAAIC,EAAW,OAAO,EAItB,IAAK,IAFDC,EAAeD,EAAWE,MAAM,OAE3BC,EAAI,EAAGA,EAAIF,EAAaG,OAAQD,IACrC,GAAGF,EAAaE,KAAOJ,EACnB,OAAO,EAGf,OAAO,EA4FX,SAASM,EAASP,EAASQ,EAAOC,GAC3BT,EAAQU,iBACPV,EAAQU,iBAAiBF,EAAOC,GAAU,GACnCT,EAAQW,aACfX,EAAQW,YAAY,KAAOH,EAAOC,GAW1C,SAASG,EAAYZ,EAASQ,EAAOC,GAC9BT,EAAQa,oBACPb,EAAQa,oBAAoBL,EAAOC,GAAU,GACtCT,EAAQc,aACfd,EAAQc,YAAY,KAAON,EAAOC,GAU1C,SAASM,EAAcf,EAASS,GAC5BF,EAASP,EAAS,QAASS,GAG/B,SAASO,EAAiBhB,EAASS,GAC/BG,EAAYZ,EAAS,QAASS,GAwS9B,OACIV,SAAUA,EACVkB,YA1ZR,SAAqBjB,EAASkB,GAC1B,GAAGA,GAAgBnB,EAASC,EAASkB,GAAe,CAIhD,IAAK,IAFDf,EADaH,EAAQC,UACKG,MAAM,OAE3BC,EAAI,EAAGA,EAAIF,EAAaG,OAAQD,IAClCF,EAAaE,KAAOa,GACnBf,EAAagB,OAAOd,EAAG,GAG/BL,EAAQC,UAAYE,EAAaiB,KAAK,OAiZtCC,SAtaR,SAAkBrB,EAASsB,GACnBvB,EAASC,EAASsB,KACdtB,EAAQC,UAGRD,EAAQC,WAAaD,EAAQC,UAAWqB,GAAcF,KAAK,KAF3DpB,EAAQC,UAAYqB,IAoaxBC,MApxBJ,SAAevB,EAASS,GACpBM,EAAcf,EAASS,IAoxBvBe,QAjxBJ,SAAiBxB,EAASS,GACtBO,EAAiBhB,EAASS,IAixB1BgB,WA5lBR,SAAoB/B,GAChB,IAAIgC,EACAC,KACAC,KAEJ,IAAInC,EAAQC,GAAK,OAAOA,EAExB,GAAW,KADXgC,EAAMhC,EAAIY,QACG,OAAOZ,EACpB,IAAK,IAAIW,EAAI,EAAGA,EAAIqB,EAAKrB,IACjBuB,EAAIlC,EAAIW,MACRuB,EAAIlC,EAAIW,KAAM,EACdsB,EAAOE,KAAKnC,EAAIW,KAIxB,OAAOsB","file":"util.js","sourcesContent":["define(function() {\n/**\n * 判断arr是否为一个数组，返回一个bool值\n *\n * @param  {any}  arr 目标对象\n * @return {boolean}        判断结果\n */\nfunction isArray(arr) {\n    return '[object Array]' === Object.prototype.toString.call(arr);\n}\n\n/**\n * 判断fn是否为一个函数，返回一个bool值\n *\n * @param  {any}  fn 目标对象\n * @return {boolean}        判断结果\n */\nfunction isFunction(fn) {\n    // chrome下,'function' == typeof /a/ 为true.\n    return '[object Function]' === Object.prototype.toString.call(fn);\n}\n\n    function click(element, listener) {\n        addClickEvent(element, listener);\n    };\n\n    function unclick(element, listener) {\n        removeClickEvent(element, listener);\n    };\n\n    function delegate(element, tag, eventName, listener) {\n        addEvent(element, eventName, function(event){\n            //target Firefox下属性，srcElement IE，chrome两者皆有\n            var target = event.target || event.srcElement;\n            if(target.tagName.toLowerCase() == tag.toLowerCase()){\n                listener.call(target, event);\n            }\n        });\n    }\n// var arr = new Array();\n// arr.push(12);\n// arr.push(3);\n// arr.push('12,3');\n// function funTest () {\n// \treturn 1;\n// }\n// var num = 1;\n// var bool = true;\n\n// console.log(typeof num == \"number\");\n// console.log(isArray(arr), isFunction(funTest));\n\n/**\n * 判断一个对象是不是字面量对象，即判断这个对象是不是由{}或者new Object类似方式创建\n *\n * 事实上来说，在Javascript语言中，任何判断都一定会有漏洞，因此本方法只针对一些最常用的情况进行了判断\n *\n * @returns {Boolean} 检查结果\n */\nfunction isPlain(obj){\n    var hasOwnProperty = Object.prototype.hasOwnProperty,\n        key;\n    if ( !obj ||\n         //一般的情况，直接用toString判断\n         Object.prototype.toString.call(obj) !== \"[object Object]\" ||\n         //IE下，window/document/document.body/HTMLElement/HTMLCollection/NodeList等DOM对象上一个语句为true\n         //isPrototypeOf挂在Object.prototype上的，因此所有的字面量都应该会有这个属性\n         //对于在window上挂了isPrototypeOf属性的情况，直接忽略不考虑\n         !('isPrototypeOf' in obj)\n       ) {\n        return false;\n    }\n\n    //判断new fun()自定义对象的情况\n    //constructor不是继承自原型链的\n    //并且原型中有isPrototypeOf方法才是Object\n    if ( obj.constructor &&\n        !hasOwnProperty.call(obj, \"constructor\") &&\n        !hasOwnProperty.call(obj.constructor.prototype, \"isPrototypeOf\") ) {\n        return false;\n    }\n    //判断有继承的情况\n    //如果有一项是继承过来的，那么一定不是字面量Object\n    //OwnProperty会首先被遍历，为了加速遍历过程，直接看最后一项\n    for ( key in obj ) {}\n    return key === undefined || hasOwnProperty.call( obj, key );\n}\n\n// 使用递归来实现一个深度克隆，可以复制一个目标对象，返回一个完整拷贝\n// 被复制的对象类型会被限制为数字、字符串、布尔、日期、数组、Object对象。不会包含函数、正则对象等\nfunction cloneObject(source) {\n    // your implement\n    var result = source;\n    var i, len;\n\n    if(!source){\n        return result;\n    } else if(isArray(source)){\n        result = [];\n        for (var j = 0; j < source.length; j++) {\n            result[j] = cloneObject(source[j]);\n        }  \n    } else if(isPlain(source)){\n        result = {};\n        for (i in source){\n            if(source.hasOwnProperty(i)){\n                result[i] = cloneObject(source[i]);\n            }\n        }\n    }\n    return result;\n    // var result = source, i, len;\n    // if (!source\n    //     || source instanceof Number\n    //     || source instanceof String\n    //     || source instanceof Boolean) {\n    //     return result;\n    // } else if (isArray(source)) {\n    //     result = [];\n    //     var resultLen = 0;\n    //     for (i = 0, len = source.length; i < len; i++) {\n    //         result[resultLen++] = cloneObject(source[i]);\n    //     }\n    // } else if (isPlain(source)) {\n    //     result = {};\n    //     for (i in source) {\n    //         if (source.hasOwnProperty(i)) {\n    //             result[i] = cloneObject(source[i]);\n    //         }\n    //     }\n    // }\n    // return result;\n}\n\n// 测试用例：\n// console.log('克隆对象');\n// var srcObj = {\n//     a: 1,\n//     b: {\n//         b1: [\"hello\", \"hi\"],\n//         b2: \"JavaScript\"\n//     }\n// };\n// var abObj = srcObj;\n// var tarObj = cloneObject(srcObj);\n\n// srcObj.a = 2;\n// srcObj.b.b1[0] = \"Hello 2\";\n\n// console.log(srcObj['a'], srcObj['b']);\n// console.log(abObj.a);\n// console.log(abObj.b.b1[0]);\n\n// console.log(tarObj.a);      // 1\n// console.log(tarObj.b.b1[0]);    // \"hello\"\n// function strCopy() {\n//     var s = {a: 2, b: '2'};\n//     return s;\n// }\n// var ss = strCopy();\n// var sss = strCopy();\n// sss.a = 3;\n// console.log(ss,sss);\n\n// console.log('克隆对象');\n// var strSrc = \"123\";\n// var strDst = cloneObject(strSrc);\n// console.log(strSrc, strDst);\n// strDst = '234';\n// console.log(strSrc, strDst);\n\n\n// var num_src = [{a: 'abc'}, \"abc\"];\n// var num_clone = cloneObject(num_src);\n// num_src[0].a = 'dd';\n// num_src[1] = 'de';\n// console.log(num_src, num_clone);\n//去掉空白数组元素\nfunction filterArray(arr) {\n    var result = [];\n    each(arr, function(item) {\n        if(item) {\n            result.push(item);\n        }\n    });\n\n    return result;\n}\n// 对数组进行去重操作，只考虑数组中元素为数字或字符串，返回一个去重后的数组\nfunction uniqArray(arr) {\n    var i, j, len;\n    var result;\n\n    result = arr.slice();\n    if(!isArray(result))return result;\n    len = result.length;\n    if(len === 1)return result;\n    for (var i = len - 1; i >= 1; i--) {\n        for (var j = i - 1; j >= 0; j--) {\n            if(result[i] === result[j]){\n                result.splice(i, 1);\n                break;\n            }\n        }\n    }\n    return result;\n}\n//hash 1\nfunction uniqArray1(arr) {\n    var len;\n    var result = [];\n    var obj = {};\n\n    if(!isArray(arr))return arr;\n    len = arr.length;\n    if(len === 1)return arr;\n    for (var i = 0; i < len; i++) {\n        if(!obj[arr[i]]) {\n            obj[arr[i]] = true;\n            result.push(arr[i]);\n        }\n    }\n\n    return result;\n}\n//hash 2\nfunction uniqArray2(arr) {\n    var len;\n    var result = [];\n    var obj = {};\n\n    if(!isArray(arr))return arr;\n    len = arr.length;\n    if(len === 1)return arr;\n    for (var i = 0; i < len; i++) {\n        obj[arr[i]] = false;\n    }\n\n    return Object.keys(obj);\n}\n\n// 使用示例\n// console.log(\"数组去重\\n\");\n// var a = [1, 3, 5, 7, 5, 3];\n// var b = uniqArray2(a);\n// console.log(a);\n// console.log(b); // [1, 3, 5, 7]\n// var c = ['a', 'b', 'c', 'a', 'c'];\n// var d = uniqArray2(c);\n// console.log(c);\n// console.log(d); // [1, 3, 5, 7]\n\n// 中级班同学跳过此题\n// 实现一个简单的trim函数，用于去除一个字符串，头部和尾部的空白字符\n// 假定空白字符只有半角空格、Tab\n// 练习通过循环，以及字符串的一些基本方法，分别扫描字符串str头部和尾部是否有连续的空白字符，并且删掉他们，最后返回一个完成去除的字符串\nfunction simpleTrim(str) {\n    var i, j;\n\n    function isEmpty(c) {\n        if(c === ' ' || c === '\\t')return true;\n        else return false;\n    }\n\n    for(i = 0; i < str.length; i++){\n        if(!isEmpty(str.charAt(i)))break;\n    }\n    for(j = str.length - 1; j >= i; j--){\n        if(!isEmpty(str.charAt(j)))break;\n    }\n    if(i > j)return '';\n    return str.substring(i, j);\n}\n\n// 很多同学肯定对于上面的代码看不下去，接下来，我们真正实现一个trim\n// 对字符串头尾进行空格字符的去除、包括全角半角空格、Tab等，返回一个字符串\n// 尝试使用一行简洁的正则表达式完成该题目\nfunction trim(str) {\n    return str.replace(/^\\s+|\\s+$/g, '');\n}\n\n// 使用示例\n// console.log('字符串去除头尾空格');\n// var str = '   hi!  ';\n// // str = trim(str);\n// str = simpleTrim(str);\n// console.log(str); // 'hi!'\n// var str = ' hh\\t';\n// // str = trim(str);\n// str = trim(str);\n// console.log(str); // 'hi!'\n\n\n// 实现一个遍历数组的方法，针对数组中每一个元素执行fn函数，并将数组索引和元素作为参数传递\nfunction each(arr, fn) {\n    for (var i = 0; i < arr.length; i++) {\n        fn(arr[i], i);\n    }\n}\n\n// 其中fn函数可以接受两个参数：item和index\n\n// 使用示例\n// console.log('数组遍历');\nvar arr = ['java', 'c', 'php', 'html'];\nfunction output(item) {\n    console.log(item)\n}\n// each(arr, output);  // java, c, php, html\n\n// 使用示例\n// var arr = ['java', 'c', 'php', 'html'];\n// function output2(item, index) {\n//     console.log(index + ': ' + item)\n// }\n// each(arr, output2);  // 0:java, 1:c, 2:php, 3:html\n\n// 获取一个对象里面第一层元素的数量，返回一个整数\nfunction getObjectLength(obj) {\n    // var arr = Object.keys(obj);\n    // return arr.length;\n    if(!Object.keys) {\n        if(!Object(obj))throw new TypeError('Object.keys called not on a object');\n    }\n    var r = [], p;\n    for(p in obj) {\n        if(Object.prototype.hasOwnProperty.call(obj, p)) {\n            r.push(p);\n        }\n    }\n    return r.length;\n}\n\n// 使用示例\n// var obj = {\n//     a: 1,\n//     b: 2,\n//     c: {\n//         c1: 3,\n//         c2: 4\n//     }\n// };\n// console.log(\"获取对象元素个数\");\n// console.log(getObjectLength(obj)); // 3\n\n//使用正则表达式\n// 判断是否为邮箱地址\n// var email = '.lj19.-+@16.com';\n// function isEmail(emailStr) {\n//     return /^([\\w_\\.\\-\\+])+\\@([\\w\\-]+\\.)+([\\w]{3,10})+$/.test(emailStr);\n\n// }\n// console.log(isEmail(email));\n\n// // 判断是否为手机号\n// var phone = '18512341232';\n// function isMobilePhone(phone) {\n//     return /^1\\d{10}$/.test(phone);\n\n// }\n// console.log(isMobilePhone(phone))\n\n//DOM\n// console.log('DOM示例');\n// var html = document.documentElement;\n// console.log(html);\n// console.log(document.childNodes[0]), \n// console.log(document.childNodes[0] == document.firstChild);\n// console.log(document.body, document.doctype);\n\n/**\n * 判断元素是否有指定class\n */\nfunction hasClass(element, className) {\n    var classNames = element.className;\n    if(!classNames)return false;\n\n    var arrClassName = classNames.split(/\\s+/);\n\n    for (var i = 0; i < arrClassName.length; i++) {\n        if(arrClassName[i] === className){\n            return true;\n        }\n    }\n    return false;\n}\n// 为element增加一个样式名为newClassName的新样式\nfunction addClass(element, newClassName) {\n    if(!hasClass(element, newClassName)) {\n        if(!element.className) {\n            element.className = newClassName;\n        } else {\n            element.className = [element.className, newClassName].join(' ');\n        }\n    }    \n}\n\n// 移除element中的样式oldClassName\nfunction removeClass(element, oldClassName) {\n    if(oldClassName && hasClass(element, oldClassName)) {\n        var classNames = element.className;\n        var arrClassName = classNames.split(/\\s+/);\n\n        for (var i = 0; i < arrClassName.length; i++) {\n            if(arrClassName[i] === oldClassName){\n                arrClassName.splice(i, 1);\n            }\n        }\n        element.className = arrClassName.join(' ');\n    }\n}\n\n// 判断siblingNode和element是否为同一个父元素下的同一级的元素，返回bool值\nfunction isSiblingNode(element, siblingNode) {\n    return element.parentNode === siblingNode.parentNode;\n}\n\n// 获取element相对于浏览器窗口的位置，返回一个对象{x, y}\nfunction getPosition(element) {\n    var cur = element;\n    var x = 0;\n    var y = 0;\n\n    while(cur !== null) {\n        x += cur.offsetLeft;\n        y += cur.offsetTop;\n        cur = cur.offsetParent;\n    }\n    \n    return {x: x, y: y};\n}\n// var div = document.getElementById('div-id');\n// console.log(div, div.className);\n// addClass(div, 'div-c3');\n// console.log(div.className);\n// removeClass(div, 'div-c3');\n// console.log(div.className);\n// var a1 = document.getElementById('a1');\n// var a1 = document.getElementById('a1');\n// var a1 = document.getElementById('a1');\n// console.log(isSiblingNode(a1, a2));\n// console.log(isSiblingNode(a1, a3));\n\n// console.log(document.getElementsByTagName('div'));\n// console.log(document.getElementById('div-id'));\n\n// var names = \"Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand \";\n\n// console.log(names);\n\n// var re = /\\s*;\\s*/;\n// var nameList = names.split(re);\n\n// console.log(nameList);\n// var arrName = Array.prototype.slice.apply(nameList);\n// console.log(arrName);\n// function blank(x) {console.log(this);\n// return 1;\n// }\n// var obj = {\n//     '1':blank\n// };\n// console.log(obj['1']);\n// var obj2 = obj['1'].apply(obj, arrName);\n// console.log(obj['1']);\n// console.log(obj2);\n\n\n// var objId = $('#div-id');\n// console.log(objId);\n\n// var classSlector = $('.aaron .class-p');\n// console.log(classSlector);\n\n// console.log('事件模型');\n// 给一个element绑定一个针对event事件的响应，响应函数为listener\nfunction addEvent(element, event, listener) {\n    if(element.addEventListener) {\n        element.addEventListener(event, listener, false);\n    } else if (element.attachEvent) {\n        element.attachEvent('on' + event, listener);\n    }\n}\n\n// 例如：\nfunction clicklistener(event) {\n    console.log(event);\n}\n// addEvent($(\"#addbtn\"), \"click\", clicklistener);\n\n// 移除element对象对于event事件发生时执行listener的响应\nfunction removeEvent(element, event, listener) {\n    if(element.removeEventListener) {\n        element.removeEventListener(event, listener, false);\n    } else if (element.detachEvent) {\n        element.detachEvent('on' + event, listener);\n    }\n}\n\n// var interval =  setInterval(function(){\n//     removeEvent($(\"#addbtn\"), \"click\", clicklistener);\n//     clearInterval(interval);\n// }, 3000);\n\n// 实现对click事件的绑定\nfunction addClickEvent(element, listener) {\n    addEvent(element, \"click\", listener);\n}\n\nfunction removeClickEvent(element, listener) {\n    removeEvent(element, \"click\", listener);\n}\n\n// 实现对于按Enter键时的事件绑定\nfunction addEnterEvent(element, listener) {\n    addEvent(element, \"keydown\", function(event) {\n        if (event.keyCode == 13) {\n            listener();\n        }\n    });\n}\n\n\n// $.click($(\"#addbtn\"), clicklistener);\n\nfunction renderList(event) {\n    console.log(event);\n    $('#list').innerHTML = '<li>new item</li>';\n}\n// function init() {\n//     // var list = $('#list li');\n//     // for(var i = 0; i < list.length; i++) {\n//     //     $.click(list[i], renderList);\n//     // }\n//     each($('#list li'), function(item) {\n//         $.click(item, renderList);\n//     });\n//     $.click($('#addbtn'), renderList);\n// }\n// init();\n\n\n// $.delegate($('#list'), 'li', 'click', renderList);\n\n// ------------------------------------------------------------------\n// 判断IE版本号，返回-1或者版本号\n// ------------------------------------------------------------------\n\n// 首先要说明的是，各种判断浏览器版本的方法，难在所有环境下都正确。navigator下的字段容易被任意篡改。\n// 所以在实际场景下，如果可能的话，避免使用获取IE版本号的方式来处理问题，\n// 更推荐的是直接判断浏览器特性（http://modernizr.com/）而非从浏览器版本入手。\n\n// 这是传统的userAgent + documentMode方式的ie版本判断。\n// 这在大多数对老IE问题进行hack的场景下有效果。\nfunction isIE() {\n    var mode = document.documentMode;\n    var agent = navigator.userAgent;\n    return /msie (\\d+\\.\\d+)/i.test(navigator.userAgent)\n        ? (document.documentMode || + RegExp['\\x241']) : undefined;\n}\n\n// console.log(isIE());\n\n// ------------------------------------------------------------------\n// 设置cookie\n// ------------------------------------------------------------------\n\n\nfunction isValidCookieName(cookieName) {\n    // http://www.w3.org/Protocols/rfc2109/rfc2109\n    // Syntax:  General\n    // The two state management headers, Set-Cookie and Cookie, have common\n    // syntactic properties involving attribute-value pairs.  The following\n    // grammar uses the notation, and tokens DIGIT (decimal digits) and\n    // token (informally, a sequence of non-special, non-white space\n    // characters) from the HTTP/1.1 specification [RFC 2068] to describe\n    // their syntax.\n    // av-pairs   = av-pair *(\";\" av-pair)\n    // av-pair    = attr [\"=\" value] ; optional value\n    // attr       = token\n    // value      = word\n    // word       = token | quoted-string\n\n    // http://www.ietf.org/rfc/rfc2068.txt\n    // token      = 1*<any CHAR except CTLs or tspecials>\n    // CHAR       = <any US-ASCII character (octets 0 - 127)>\n    // CTL        = <any US-ASCII control character\n    //              (octets 0 - 31) and DEL (127)>\n    // tspecials  = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n    //              | \",\" | \";\" | \":\" | \"\\\" | <\">\n    //              | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n    //              | \"{\" | \"}\" | SP | HT\n    // SP         = <US-ASCII SP, space (32)>\n    // HT         = <US-ASCII HT, horizontal-tab (9)>\n\n    return (new RegExp('^[^\\\\x00-\\\\x20\\\\x7f\\\\(\\\\)<>@,;:\\\\\\\\\\\\\\\"\\\\[\\\\]\\\\?=\\\\{\\\\}\\\\/\\\\u0080-\\\\uffff]+\\x24'))\n        .test(cookieName);\n}\n\nfunction setCookie(cookieName, cookieValue, expiredays) {\n    if (!isValidCookieName(cookieName)) {\n        return;\n    }\n\n    var expires;\n    if (expiredays != null) {\n        expires = new Date();\n        expires.setTime(expires.getTime() + expiredays * 24 * 60 * 60 * 1000);\n    }\n\n    document.cookie =\n        cookieName + '=' + encodeURIComponent(cookieValue)\n        + (expires ? '; expires=' + expires.toGMTString() : '');\n}\n\nfunction getCookie(cookieName) {\n    if (isValidCookieName(cookieName)) {\n        var reg = new RegExp('(^| )' + cookieName + '=([^;]*)(;|\\x24)');\n        var result = reg.exec(document.cookie);\n\n        if (result) {\n            return result[2] || null;\n        }\n    }\n\n    return null;\n}\n\nfunction ajax(url, options) {\n    var options = options || {};\n    var type = (options.type || 'GET').toUpperCase();\n    var data = stringifyData(options.data || {});\n    var eventHandlers = {\n        onsuccess: options.onsuccess,\n        onfail: options.onfail\n    };\n    var xhr;\n\n    try {\n        xhr = getXHR();\n        xhr.open(type, url, true);\n        xhr.onreadystatechange = stateChangeHandler;\n\n        // 在open之后再进行http请求头设定\n        if (type === 'POST') {\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        }\n        xhr.setRequestHeader('Access-Control-Allow-Origin', '*');\n        xhr.setRequestHeader('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS');\n        xhr.setRequestHeader('Access-Control-Allow-Headers', 'accept, content-type, x-parse-application-id, x-parse-rest-api-key, x-parse-session-token');\n        // xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        xhr.send();\n    }\n    catch(ex) {\n        fire('fail');\n    }\n    return xhr;\n\n    function stringifyData(data) {\n        // 此方法只是简单示意性实现，并未考虑数组等情况。\n        var param = [];\n        for (var key in data) {\n            if (data.hasOwnProperty(key)) {\n                param.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]));\n            }\n        }\n        return param.join('&');\n    }\n\n    function getXHR() {\n        if (window.ActiveXObject) {\n            try {\n                return new ActiveXObject('Msxml2.XMLHTTP');\n            }\n            catch (e) {\n                try {\n                    return new ActiveXObject('Microsoft.XMLHTTP');\n                }\n                catch (e) {}\n            }\n        }\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n    }\n\n    function stateChangeHandler() {\n        var stat;\n        console.log(\"xxx\", xhr.readyState, xhr.state);\n        if (xhr.readyState === 4) {\n            try {\n                stat = xhr.status;\n            }\n            catch (ex) {\n                // 在请求时，如果网络中断，Firefox会无法取得status\n                fire('fail');\n                return;\n            }\n\n            fire(stat);\n\n            // http://www.never-online.net/blog/article.asp?id=261\n            // case 12002: // Server timeout\n            // case 12029: // dropped connections\n            // case 12030: // dropped connections\n            // case 12031: // dropped connections\n            // case 12152: // closed by server\n            // case 13030: // status and statusText are unavailable\n\n            // IE error sometimes returns 1223 when it\n            // should be 204, so treat it as success\n            if ((stat >= 200 && stat < 300)\n                || stat === 304\n                || stat === 1223) {\n                fire('success');\n            }\n            else {\n                fire('fail');\n            }\n\n            /*\n             * NOTE: Testing discovered that for some bizarre reason, on Mozilla, the\n             * JavaScript <code>XmlHttpRequest.onreadystatechange</code> handler\n             * function maybe still be called after it is deleted. The theory is that the\n             * callback is cached somewhere. Setting it to null or an empty function does\n             * seem to work properly, though.\n             *\n             * On IE, there are two problems: Setting onreadystatechange to null (as\n             * opposed to an empty function) sometimes throws an exception. With\n             * particular (rare) versions of jscript.dll, setting onreadystatechange from\n             * within onreadystatechange causes a crash. Setting it from within a timeout\n             * fixes this bug (see issue 1610).\n             *\n             * End result: *always* set onreadystatechange to an empty function (never to\n             * null). Never set onreadystatechange from within onreadystatechange (always\n             * in a setTimeout()).\n             */\n            window.setTimeout(\n                function() {\n                    xhr.onreadystatechange = new Function();\n                    xhr = null;\n                },\n                0\n            );\n            }\n    }\n\n    function fire(type) {\n        type = 'on' + type;\n        var handler = eventHandlers[type];\n\n        if (!handler) {\n            return;\n        }\n        if (type !== 'onsuccess') {\n            handler(xhr);\n        }\n        else {\n            //处理获取xhr.responseText导致出错的情况,比如请求图片地址.\n            try {\n                console.log(xhr.responseText);\n            }\n            catch(error) {\n                return handler(xhr);\n            }\n            handler(xhr, xhr.responseText);\n        }\n    }\n}\n\n// var options = {\n//     type: 'GET',\n//     data: null,\n//     onsuccess: function(arg1, arg2) {\n//         console.log('onsuccess');\n//         console.log(arg1, arg2);\n//     },\n//     onfail: function(arg1, arg2) {\n//         console.log('onfail');\n//         console.log(arg1, arg2);\n//     }\n// };\n\n// ajax('http://www.w3school.com.cn/   ajax/demo_get2.asp?fname=Bill&lname=Gates', options);\n\n// function apple() {}\n// apple.prototype = {\n//     product: 'mac',\n//     say: function() {\n//         console.log(this.product);\n//     }\n// }\n\n// var product = new apple();\n// product.say(); //mac\n// var phone = {\n//     product: 'iphone'\n// }\n// product.say.call(phone); //iphone\n\n// function fun(arg1, arg2) {\n//     console.log(arg1, arg2);\n// }\n// var arg1 = 1, arg2 = 2;\n// fun.call(this, arg1, arg2);\n// fun.apply(this, [arg1, arg2]);\n    return {\n        hasClass: hasClass,\n        removeClass: removeClass,\n        addClass: addClass,\n        click: click,\n        unclick: unclick,\n        uniqArray1: uniqArray1\n    }\n\n});\n\n"]}